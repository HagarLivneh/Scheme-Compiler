
;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"

section .bss
malloc_pointer:
    resq 1

section .data
const_tbl:
MAKE_LITERAL_VOID
MAKE_LITERAL_NIL
MAKE_LITERAL_BOOL(0)
MAKE_LITERAL_BOOL(1)
MAKE_LITERAL_STRING 8, 119, 104, 97, 116, 101, 118, 101, 114
MAKE_LITERAL_SYMBOL const_tbl+6
MAKE_LITERAL_INT(0)
MAKE_LITERAL_INT(1)
MAKE_LITERAL_STRING 57, 116, 104, 105, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 110, 32, 101, 114, 114, 111, 114, 44, 32, 98, 117, 116, 32, 121, 111, 117, 32, 100, 111, 110, 39, 116, 32, 115, 117, 112, 112, 111, 114, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 115
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_INT(2)

;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl + 0
%define SOB_NIL_ADDRESS const_tbl + 1
%define SOB_FALSE_ADDRESS const_tbl + 2
%define SOB_TRUE_ADDRESS const_tbl + 4

fvar_tbl:
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED
dq T_UNDEFINED

global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(4)
    call malloc
    mov [malloc_pointer], rax

    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0
    push qword SOB_NIL_ADDRESS
    push qword T_UNDEFINED
    push rsp

    jmp code_fragment
    
end_last_frame:
    add rsp, 4*8
    ret

code_fragment:
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we emulate the missing (define ...) expressions
    ;; for all the primitive procedures.
    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_boolean)
        mov [fvar_tbl + 0*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_float)
        mov [fvar_tbl + 1*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_integer)
        mov [fvar_tbl + 2*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_pair)
        mov [fvar_tbl + 3*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_null)
        mov [fvar_tbl + 4*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_char)
        mov [fvar_tbl + 5*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_vector)
        mov [fvar_tbl + 6*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_string)
        mov [fvar_tbl + 7*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_procedure)
        mov [fvar_tbl + 8*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_symbol)
        mov [fvar_tbl + 9*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
        mov [fvar_tbl + 10*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
        mov [fvar_tbl + 11*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
        mov [fvar_tbl + 12*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
        mov [fvar_tbl + 13*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_length)
        mov [fvar_tbl + 14*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_ref)
        mov [fvar_tbl + 15*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, vector_set)
        mov [fvar_tbl + 16*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_vector)
        mov [fvar_tbl + 17*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
        mov [fvar_tbl + 18*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
        mov [fvar_tbl + 19*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
        mov [fvar_tbl + 20*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, is_eq)
        mov [fvar_tbl + 21*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_add)
        mov [fvar_tbl + 22*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_mul)
        mov [fvar_tbl + 23*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_sub)
        mov [fvar_tbl + 24*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_div)
        mov [fvar_tbl + 25*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_lt)
        mov [fvar_tbl + 26*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, bin_equ)
        mov [fvar_tbl + 27*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, my_car)
        mov [fvar_tbl + 28*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, my_cdr)
        mov [fvar_tbl + 29*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car_set)
        mov [fvar_tbl + 30*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr_set)
        mov [fvar_tbl + 31*WORD_SIZE], rax

    MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, my_cons)
        mov [fvar_tbl + 32*WORD_SIZE], rax

 
Lmy_code_starts_here:
	nop
;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 32*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 5
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame0x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers0x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2
	mov r10, 0
Lcopy_new_var_params0x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2
Ldummy_frame0x1x2:
Lno_more_args0x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode0x1x2 )
	jmp Lcont0x1x2
Lcode0x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame0x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers0x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2x3
	mov r10, 0
Lcopy_new_var_params0x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2x3
Ldummy_frame0x1x2x3:
Lno_more_args0x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode0x1x2x3 )
	jmp Loptcont0x1x2x3
Loptcode0x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist0x1x2x3
Lmakelist0x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist0x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist0x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end0x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat0x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat0x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end0x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
;CONST
	mov rax, const_tbl+1
	push rax
	push 3
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame0x1x2x3x4x5x6
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2x3x4x5x6:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers0x1x2x3x4x5x6
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2x3x4x5x6
	mov r10, 0
Lcopy_new_var_params0x1x2x3x4x5x6:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2x3x4x5x6
Ldummy_frame0x1x2x3x4x5x6:
Lno_more_args0x1x2x3x4x5x6:
	MAKE_CLOSURE(rax, rbx, Lcode0x1x2x3x4x5x6 )
	jmp Lcont0x1x2x3x4x5x6
Lcode0x1x2x3x4x5x6:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame0x1x2x3x4x5x6x7x9x10x11
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2x3x4x5x6x7x9x10x11
	mov r10, 0
Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11
Ldummy_frame0x1x2x3x4x5x6x7x9x10x11:
Lno_more_args0x1x2x3x4x5x6x7x9x10x11:
	MAKE_CLOSURE(rax, rbx, Lcode0x1x2x3x4x5x6x7x9x10x11 )
	jmp Lcont0x1x2x3x4x5x6x7x9x10x11
Lcode0x1x2x3x4x5x6x7x9x10x11:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse0x1x2x3x4x5x6x7x9x10x11x12x13
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	jmp Lifexit0x1x2x3x4x5x6x7x9x10x11x12x13
Lelse0x1x2x3x4x5x6x7x9x10x11x12x13:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 40
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 4
	cmp r8, qword 0
	je Ldummy_frame0x1x2x3x4x5x6x7x9x10x11x12x13x16x17
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 5
	jne Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11x12x13x16x17
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2x3x4x5x6x7x9x10x11x12x13x16x17
	mov r10, 0
Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11x12x13x16x17
Ldummy_frame0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:
Lno_more_args0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:
	MAKE_CLOSURE(rax, rbx, Lcode0x1x2x3x4x5x6x7x9x10x11x12x13x16x17 )
	jmp Lcont0x1x2x3x4x5x6x7x9x10x11x12x13x16x17
Lcode0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 48
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 5
	cmp r8, qword 0
	je Ldummy_frame0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 6
	jne Lcopy_pointers0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22
	mov r10, 0
Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22
Ldummy_frame0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
Lno_more_args0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
	MAKE_CLOSURE(rax, rbx, Lcode0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22 )
	jmp Lcont0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22
Lcode0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22x23x24
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22x23x24
Lelse0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22x23x24:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *4]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22x23x24:
	leave
	ret
Lcont0x1x2x3x4x5x6x7x9x10x11x12x13x16x17x18x20x21x22:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]
	leave
	ret
Lcont0x1x2x3x4x5x6x7x9x10x11x12x13x16x17:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit0x1x2x3x4x5x6x7x9x10x11x12x13:
	leave
	ret
Lcont0x1x2x3x4x5x6x7x9x10x11:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]
	leave
	ret
Lcont0x1x2x3x4x5x6:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Loptcont0x1x2x3:
	leave
	ret
Lcont0x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 33*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame1x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers1x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers1x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args1x1x2
	mov r10, 0
Lcopy_new_var_params1x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params1x1x2
Ldummy_frame1x1x2:
Lno_more_args1x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode1x1x2 )
	jmp Lcont1x1x2
Lcode1x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame1x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers1x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers1x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args1x1x2x3
	mov r10, 0
Lcopy_new_var_params1x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params1x1x2x3
Ldummy_frame1x1x2x3:
Lno_more_args1x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode1x1x2x3 )
	jmp Lcont1x1x2x3
Lcode1x1x2x3:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont1x1x2x3:
	leave
	ret
Lcont1x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 34*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;LAMBDA_OPT
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame2x1
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers2x1:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers2x1
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args2x1
	mov r10, 0
Lcopy_new_var_params2x1:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params2x1
Ldummy_frame2x1:
Lno_more_args2x1:
	MAKE_CLOSURE(rax, rbx, Loptcode2x1 )
	jmp Loptcont2x1
Loptcode2x1:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist2x1
Lmakelist2x1:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist2x1
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist2x1:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end2x1
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat2x1:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat2x1
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end2x1:
	nop
	push rbp
	mov rbp , rsp
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	leave
	ret
Loptcont2x1:
	mov qword [fvar_tbl + 35*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 3*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 4
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame3x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers3x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers3x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args3x1x2
	mov r10, 0
Lcopy_new_var_params3x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params3x1x2
Ldummy_frame3x1x2:
Lno_more_args3x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode3x1x2 )
	jmp Lcont3x1x2
Lcode3x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame3x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers3x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers3x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args3x1x2x3
	mov r10, 0
Lcopy_new_var_params3x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params3x1x2x3
Ldummy_frame3x1x2x3:
Lno_more_args3x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode3x1x2x3 )
	jmp Lcont3x1x2x3
Lcode3x1x2x3:
	push rbp
	mov rbp , rsp
;OR
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit3x1x2x3x4
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse3x1x2x3x4x6x7
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;VAR_FREE
	mov rax, qword [fvar_tbl + 36*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit3x1x2x3x4x6x7
Lelse3x1x2x3x4x6x7:
;CONST
	mov rax, const_tbl+2
Lifexit3x1x2x3x4x6x7:
Lorexit3x1x2x3x4:
	leave
	ret
Lcont3x1x2x3:
	leave
	ret
Lcont3x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 36*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 22*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 3*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 5
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame4x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers4x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers4x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args4x1x2
	mov r10, 0
Lcopy_new_var_params4x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params4x1x2
Ldummy_frame4x1x2:
Lno_more_args4x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode4x1x2 )
	jmp Lcont4x1x2
Lcode4x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame4x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers4x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers4x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args4x1x2x3
	mov r10, 0
Lcopy_new_var_params4x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params4x1x2x3
Ldummy_frame4x1x2x3:
Lno_more_args4x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode4x1x2x3 )
	jmp Lcont4x1x2x3
Lcode4x1x2x3:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 3
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame4x1x2x3x4x5
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers4x1x2x3x4x5:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers4x1x2x3x4x5
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args4x1x2x3x4x5
	mov r10, 0
Lcopy_new_var_params4x1x2x3x4x5:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params4x1x2x3x4x5
Ldummy_frame4x1x2x3x4x5:
Lno_more_args4x1x2x3x4x5:
	MAKE_CLOSURE(rax, rbx, Lcode4x1x2x3x4x5 )
	jmp Lcont4x1x2x3x4x5
Lcode4x1x2x3x4x5:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 1)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 1)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;SET_VAR_PARAM
;CONST
	mov rax, const_tbl+32
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame4x1x2x3x4x5x6x8x10x11
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers4x1x2x3x4x5x6x8x10x11:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers4x1x2x3x4x5x6x8x10x11
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args4x1x2x3x4x5x6x8x10x11
	mov r10, 0
Lcopy_new_var_params4x1x2x3x4x5x6x8x10x11:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params4x1x2x3x4x5x6x8x10x11
Ldummy_frame4x1x2x3x4x5x6x8x10x11:
Lno_more_args4x1x2x3x4x5x6x8x10x11:
	MAKE_CLOSURE(rax, rbx, Lcode4x1x2x3x4x5x6x8x10x11 )
	jmp Lcont4x1x2x3x4x5x6x8x10x11
Lcode4x1x2x3x4x5x6x8x10x11:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse4x1x2x3x4x5x6x8x10x11x12x13
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	jmp Lifexit4x1x2x3x4x5x6x8x10x11x12x13
Lelse4x1x2x3x4x5x6x8x10x11x12x13:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse4x1x2x3x4x5x6x8x10x11x12x13x16
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit4x1x2x3x4x5x6x8x10x11x12x13x16
Lelse4x1x2x3x4x5x6x8x10x11x12x13x16:
;CONST
	mov rax, const_tbl+50
Lifexit4x1x2x3x4x5x6x8x10x11x12x13x16:
Lifexit4x1x2x3x4x5x6x8x10x11x12x13:
	leave
	ret
Lcont4x1x2x3x4x5x6x8x10x11:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 3
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont4x1x2x3x4x5:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont4x1x2x3:
	leave
	ret
Lcont4x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 37*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 37*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 13*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 6
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame5x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers5x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers5x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args5x1x2
	mov r10, 0
Lcopy_new_var_params5x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params5x1x2
Ldummy_frame5x1x2:
Lno_more_args5x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode5x1x2 )
	jmp Lcont5x1x2
Lcode5x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame5x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers5x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers5x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args5x1x2x3
	mov r10, 0
Lcopy_new_var_params5x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params5x1x2x3
Ldummy_frame5x1x2x3:
Lno_more_args5x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode5x1x2x3 )
	jmp Loptcont5x1x2x3
Loptcode5x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 1
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist5x1x2x3
Lmakelist5x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist5x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist5x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 2
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end5x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 2
	add r9, 3
	add r15, 2
Llambdaopt_repeat5x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat5x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 3
	mov [rsp + 8*2], r14
Llambdaopt_end5x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse5x1x2x3x4x5
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+116
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit5x1x2x3x4x5
Lelse5x1x2x3x4x5:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse5x1x2x3x4x5x8
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit5x1x2x3x4x5x8
Lelse5x1x2x3x4x5x8:
;CONST
	mov rax, const_tbl+50
Lifexit5x1x2x3x4x5x8:
Lifexit5x1x2x3x4x5:
	leave
	ret
Loptcont5x1x2x3:
	leave
	ret
Lcont5x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 13*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 17*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 37*WORD_SIZE]
	push rax
	push 5
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame6x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers6x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers6x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args6x1x2
	mov r10, 0
Lcopy_new_var_params6x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params6x1x2
Ldummy_frame6x1x2:
Lno_more_args6x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode6x1x2 )
	jmp Lcont6x1x2
Lcode6x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame6x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers6x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers6x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args6x1x2x3
	mov r10, 0
Lcopy_new_var_params6x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params6x1x2x3
Ldummy_frame6x1x2x3:
Lno_more_args6x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode6x1x2x3 )
	jmp Loptcont6x1x2x3
Loptcode6x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 1
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist6x1x2x3
Lmakelist6x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist6x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist6x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 2
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end6x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 2
	add r9, 3
	add r15, 2
Llambdaopt_repeat6x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat6x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 3
	mov [rsp + 8*2], r14
Llambdaopt_end6x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse6x1x2x3x4x5
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit6x1x2x3x4x5
Lelse6x1x2x3x4x5:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse6x1x2x3x4x5x8
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit6x1x2x3x4x5x8
Lelse6x1x2x3x4x5x8:
;CONST
	mov rax, const_tbl+50
Lifexit6x1x2x3x4x5x8:
Lifexit6x1x2x3x4x5:
	leave
	ret
Loptcont6x1x2x3:
	leave
	ret
Lcont6x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 17*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 21*WORD_SIZE]
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame7x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers7x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers7x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args7x1x2
	mov r10, 0
Lcopy_new_var_params7x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params7x1x2
Ldummy_frame7x1x2:
Lno_more_args7x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode7x1x2 )
	jmp Lcont7x1x2
Lcode7x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame7x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers7x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers7x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args7x1x2x3
	mov r10, 0
Lcopy_new_var_params7x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params7x1x2x3
Ldummy_frame7x1x2x3:
Lno_more_args7x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode7x1x2x3 )
	jmp Lcont7x1x2x3
Lcode7x1x2x3:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+4
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse7x1x2x3x4x5
;CONST
	mov rax, const_tbl+2
	jmp Lifexit7x1x2x3x4x5
Lelse7x1x2x3x4x5:
;CONST
	mov rax, const_tbl+4
Lifexit7x1x2x3x4x5:
	leave
	ret
Lcont7x1x2x3:
	leave
	ret
Lcont7x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 38*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 2*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 1*WORD_SIZE]
	push rax
	push 3
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame8x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers8x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers8x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args8x1x2
	mov r10, 0
Lcopy_new_var_params8x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params8x1x2
Ldummy_frame8x1x2:
Lno_more_args8x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode8x1x2 )
	jmp Lcont8x1x2
Lcode8x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame8x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers8x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers8x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args8x1x2x3
	mov r10, 0
Lcopy_new_var_params8x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params8x1x2x3
Ldummy_frame8x1x2x3:
Lno_more_args8x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode8x1x2x3 )
	jmp Lcont8x1x2x3
Lcode8x1x2x3:
	push rbp
	mov rbp , rsp
;OR
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit8x1x2x3x4
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
Lorexit8x1x2x3x4:
	leave
	ret
Lcont8x1x2x3:
	leave
	ret
Lcont8x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 39*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 41*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 32*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 6
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame9x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers9x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2
	mov r10, 0
Lcopy_new_var_params9x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2
Ldummy_frame9x1x2:
Lno_more_args9x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2 )
	jmp Lcont9x1x2
Lcode9x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers9x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3
	mov r10, 0
Lcopy_new_var_params9x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3
Ldummy_frame9x1x2x3:
Lno_more_args9x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode9x1x2x3 )
	jmp Loptcont9x1x2x3
Loptcode9x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 2
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist9x1x2x3
Lmakelist9x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist9x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist9x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 3
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end9x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 3
	add r9, 3
	add r15, 2
Llambdaopt_repeat9x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat9x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 4
	mov [rsp + 8*2], r14
Llambdaopt_end9x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse9x1x2x3x4x5
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x7
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x7:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers9x1x2x3x4x5x7
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x7
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x7:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x7
Ldummy_frame9x1x2x3x4x5x7:
Lno_more_args9x1x2x3x4x5x7:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x7 )
	jmp Lcont9x1x2x3x4x5x7
Lcode9x1x2x3x4x5x7:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers9x1x2x3x4x5x7x8x9
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x7x8x9
Ldummy_frame9x1x2x3x4x5x7x8x9:
Lno_more_args9x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x7x8x9 )
	jmp Lcont9x1x2x3x4x5x7x8x9
Lcode9x1x2x3x4x5x7x8x9:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 40
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 4
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x7x8x9x10x12x13x14
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x7x8x9x10x12x13x14:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 5
	jne Lcopy_pointers9x1x2x3x4x5x7x8x9x10x12x13x14
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x7x8x9x10x12x13x14
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x7x8x9x10x12x13x14:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x7x8x9x10x12x13x14
Ldummy_frame9x1x2x3x4x5x7x8x9x10x12x13x14:
Lno_more_args9x1x2x3x4x5x7x8x9x10x12x13x14:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x7x8x9x10x12x13x14 )
	jmp Lcont9x1x2x3x4x5x7x8x9x10x12x13x14
Lcode9x1x2x3x4x5x7x8x9x10x12x13x14:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse9x1x2x3x4x5x7x8x9x10x12x13x14x15x16
;CONST
	mov rax, const_tbl+1
	jmp Lifexit9x1x2x3x4x5x7x8x9x10x12x13x14x15x16
Lelse9x1x2x3x4x5x7x8x9x10x12x13x14x15x16:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit9x1x2x3x4x5x7x8x9x10x12x13x14x15x16:
	leave
	ret
Lcont9x1x2x3x4x5x7x8x9x10x12x13x14:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 2
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont9x1x2x3x4x5x7x8x9:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont9x1x2x3x4x5x7:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit9x1x2x3x4x5
Lelse9x1x2x3x4x5:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 3
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x8
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x8:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers9x1x2x3x4x5x8
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x8
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x8:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x8
Ldummy_frame9x1x2x3x4x5x8:
Lno_more_args9x1x2x3x4x5x8:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x8 )
	jmp Lcont9x1x2x3x4x5x8
Lcode9x1x2x3x4x5x8:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x8x9x10
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x8x9x10:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers9x1x2x3x4x5x8x9x10
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x8x9x10
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x8x9x10:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x8x9x10
Ldummy_frame9x1x2x3x4x5x8x9x10:
Lno_more_args9x1x2x3x4x5x8x9x10:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x8x9x10 )
	jmp Lcont9x1x2x3x4x5x8x9x10
Lcode9x1x2x3x4x5x8x9x10:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 40
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 4
	cmp r8, qword 0
	je Ldummy_frame9x1x2x3x4x5x8x9x10x11x13x14x15
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers9x1x2x3x4x5x8x9x10x11x13x14x15:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 5
	jne Lcopy_pointers9x1x2x3x4x5x8x9x10x11x13x14x15
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args9x1x2x3x4x5x8x9x10x11x13x14x15
	mov r10, 0
Lcopy_new_var_params9x1x2x3x4x5x8x9x10x11x13x14x15:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params9x1x2x3x4x5x8x9x10x11x13x14x15
Ldummy_frame9x1x2x3x4x5x8x9x10x11x13x14x15:
Lno_more_args9x1x2x3x4x5x8x9x10x11x13x14x15:
	MAKE_CLOSURE(rax, rbx, Lcode9x1x2x3x4x5x8x9x10x11x13x14x15 )
	jmp Lcont9x1x2x3x4x5x8x9x10x11x13x14x15
Lcode9x1x2x3x4x5x8x9x10x11x13x14x15:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse9x1x2x3x4x5x8x9x10x11x13x14x15x16x17
;CONST
	mov rax, const_tbl+1
	jmp Lifexit9x1x2x3x4x5x8x9x10x11x13x14x15x16x17
Lelse9x1x2x3x4x5x8x9x10x11x13x14x15x16x17:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *4]
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 40*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *3]
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 40*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]
	push rax
	push 4
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *3]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit9x1x2x3x4x5x8x9x10x11x13x14x15x16x17:
	leave
	ret
Lcont9x1x2x3x4x5x8x9x10x11x13x14x15:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 3
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont9x1x2x3x4x5x8x9x10:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont9x1x2x3x4x5x8:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit9x1x2x3x4x5:
	leave
	ret
Loptcont9x1x2x3:
	leave
	ret
Lcont9x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 40*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 22*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 37*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 17*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 3*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 8
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame10x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers10x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers10x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args10x1x2
	mov r10, 0
Lcopy_new_var_params10x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params10x1x2
Ldummy_frame10x1x2:
Lno_more_args10x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode10x1x2 )
	jmp Lcont10x1x2
Lcode10x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame10x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers10x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers10x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args10x1x2x3
	mov r10, 0
Lcopy_new_var_params10x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params10x1x2x3
Ldummy_frame10x1x2x3:
Lno_more_args10x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode10x1x2x3 )
	jmp Lcont10x1x2x3
Lcode10x1x2x3:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame10x1x2x3x4x5
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers10x1x2x3x4x5:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers10x1x2x3x4x5
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args10x1x2x3x4x5
	mov r10, 0
Lcopy_new_var_params10x1x2x3x4x5:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params10x1x2x3x4x5
Ldummy_frame10x1x2x3x4x5:
Lno_more_args10x1x2x3x4x5:
	MAKE_CLOSURE(rax, rbx, Lcode10x1x2x3x4x5 )
	jmp Lcont10x1x2x3x4x5
Lcode10x1x2x3x4x5:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame10x1x2x3x4x5x6x8x9x10
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers10x1x2x3x4x5x6x8x9x10:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers10x1x2x3x4x5x6x8x9x10
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args10x1x2x3x4x5x6x8x9x10
	mov r10, 0
Lcopy_new_var_params10x1x2x3x4x5x6x8x9x10:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params10x1x2x3x4x5x6x8x9x10
Ldummy_frame10x1x2x3x4x5x6x8x9x10:
Lno_more_args10x1x2x3x4x5x6x8x9x10:
	MAKE_CLOSURE(rax, rbx, Lcode10x1x2x3x4x5x6x8x9x10 )
	jmp Lcont10x1x2x3x4x5x6x8x9x10
Lcode10x1x2x3x4x5x6x8x9x10:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse10x1x2x3x4x5x6x8x9x10x11x12
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	jmp Lifexit10x1x2x3x4x5x6x8x9x10x11x12
Lelse10x1x2x3x4x5x6x8x9x10x11x12:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse10x1x2x3x4x5x6x8x9x10x11x12x15
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *6]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;SEQ
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 4
;VAR_FREE
	mov rax, qword [fvar_tbl + 16*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 4
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 4
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit10x1x2x3x4x5x6x8x9x10x11x12x15
Lelse10x1x2x3x4x5x6x8x9x10x11x12x15:
;CONST
	mov rax, const_tbl+50
Lifexit10x1x2x3x4x5x6x8x9x10x11x12x15:
Lifexit10x1x2x3x4x5x6x8x9x10x11x12:
	leave
	ret
Lcont10x1x2x3x4x5x6x8x9x10:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *5]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 4
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 4
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont10x1x2x3x4x5:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont10x1x2x3:
	leave
	ret
Lcont10x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 42*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 24*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 14*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 32*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 15*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 26*WORD_SIZE]
	push rax
	push 6
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame11x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers11x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers11x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args11x1x2
	mov r10, 0
Lcopy_new_var_params11x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params11x1x2
Ldummy_frame11x1x2:
Lno_more_args11x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode11x1x2 )
	jmp Lcont11x1x2
Lcode11x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame11x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers11x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers11x1x2x3
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args11x1x2x3
	mov r10, 0
Lcopy_new_var_params11x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params11x1x2x3
Ldummy_frame11x1x2x3:
Lno_more_args11x1x2x3:
	MAKE_CLOSURE(rax, rbx, Lcode11x1x2x3 )
	jmp Lcont11x1x2x3
Lcode11x1x2x3:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame11x1x2x3x4x5
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers11x1x2x3x4x5:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers11x1x2x3x4x5
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args11x1x2x3x4x5
	mov r10, 0
Lcopy_new_var_params11x1x2x3x4x5:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params11x1x2x3x4x5
Ldummy_frame11x1x2x3x4x5:
Lno_more_args11x1x2x3x4x5:
	MAKE_CLOSURE(rax, rbx, Lcode11x1x2x3x4x5 )
	jmp Lcont11x1x2x3x4x5
Lcode11x1x2x3x4x5:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame11x1x2x3x4x5x6x8x9x10
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers11x1x2x3x4x5x6x8x9x10:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers11x1x2x3x4x5x6x8x9x10
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args11x1x2x3x4x5x6x8x9x10
	mov r10, 0
Lcopy_new_var_params11x1x2x3x4x5x6x8x9x10:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params11x1x2x3x4x5x6x8x9x10
Ldummy_frame11x1x2x3x4x5x6x8x9x10:
Lno_more_args11x1x2x3x4x5x6x8x9x10:
	MAKE_CLOSURE(rax, rbx, Lcode11x1x2x3x4x5x6x8x9x10 )
	jmp Lcont11x1x2x3x4x5x6x8x9x10
Lcode11x1x2x3x4x5x6x8x9x10:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse11x1x2x3x4x5x6x8x9x10x11x12
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	jmp Lifexit11x1x2x3x4x5x6x8x9x10x11x12
Lelse11x1x2x3x4x5x6x8x9x10x11x12:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 4
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 4
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit11x1x2x3x4x5x6x8x9x10x11x12:
	leave
	ret
Lcont11x1x2x3x4x5x6x8x9x10:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 4
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 4
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont11x1x2x3x4x5:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont11x1x2x3:
	leave
	ret
Lcont11x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 43*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 42*WORD_SIZE]
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame12x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers12x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers12x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args12x1x2
	mov r10, 0
Lcopy_new_var_params12x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params12x1x2
Ldummy_frame12x1x2:
Lno_more_args12x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode12x1x2 )
	jmp Lcont12x1x2
Lcode12x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame12x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers12x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers12x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args12x1x2x3
	mov r10, 0
Lcopy_new_var_params12x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params12x1x2x3
Ldummy_frame12x1x2x3:
Lno_more_args12x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode12x1x2x3 )
	jmp Loptcont12x1x2x3
Loptcode12x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist12x1x2x3
Lmakelist12x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist12x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist12x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end12x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat12x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat12x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end12x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Loptcont12x1x2x3:
	leave
	ret
Lcont12x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 44*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 41*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 22*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 6
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame13x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers13x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers13x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args13x1x2
	mov r10, 0
Lcopy_new_var_params13x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params13x1x2
Ldummy_frame13x1x2:
Lno_more_args13x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode13x1x2 )
	jmp Lcont13x1x2
Lcode13x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame13x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers13x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers13x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args13x1x2x3x4
	mov r10, 0
Lcopy_new_var_params13x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params13x1x2x3x4
Ldummy_frame13x1x2x3x4:
Lno_more_args13x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode13x1x2x3x4 )
	jmp Lcont13x1x2x3x4
Lcode13x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame13x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers13x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers13x1x2x3x4x5x7x8x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args13x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params13x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params13x1x2x3x4x5x7x8x9
Ldummy_frame13x1x2x3x4x5x7x8x9:
Lno_more_args13x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Loptcode13x1x2x3x4x5x7x8x9 )
	jmp Loptcont13x1x2x3x4x5x7x8x9
Loptcode13x1x2x3x4x5x7x8x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist13x1x2x3x4x5x7x8x9
Lmakelist13x1x2x3x4x5x7x8x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist13x1x2x3x4x5x7x8x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist13x1x2x3x4x5x7x8x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end13x1x2x3x4x5x7x8x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat13x1x2x3x4x5x7x8x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat13x1x2x3x4x5x7x8x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end13x1x2x3x4x5x7x8x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse13x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+32
	jmp Lifexit13x1x2x3x4x5x7x8x9x10x11
Lelse13x1x2x3x4x5x7x8x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit13x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Loptcont13x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]
	leave
	ret
Lcont13x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont13x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 22*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 41*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 23*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 6
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame14x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers14x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers14x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args14x1x2
	mov r10, 0
Lcopy_new_var_params14x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params14x1x2
Ldummy_frame14x1x2:
Lno_more_args14x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode14x1x2 )
	jmp Lcont14x1x2
Lcode14x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame14x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers14x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers14x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args14x1x2x3x4
	mov r10, 0
Lcopy_new_var_params14x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params14x1x2x3x4
Ldummy_frame14x1x2x3x4:
Lno_more_args14x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode14x1x2x3x4 )
	jmp Lcont14x1x2x3x4
Lcode14x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame14x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers14x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers14x1x2x3x4x5x7x8x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args14x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params14x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params14x1x2x3x4x5x7x8x9
Ldummy_frame14x1x2x3x4x5x7x8x9:
Lno_more_args14x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Loptcode14x1x2x3x4x5x7x8x9 )
	jmp Loptcont14x1x2x3x4x5x7x8x9
Loptcode14x1x2x3x4x5x7x8x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist14x1x2x3x4x5x7x8x9
Lmakelist14x1x2x3x4x5x7x8x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist14x1x2x3x4x5x7x8x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist14x1x2x3x4x5x7x8x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end14x1x2x3x4x5x7x8x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat14x1x2x3x4x5x7x8x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat14x1x2x3x4x5x7x8x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end14x1x2x3x4x5x7x8x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse14x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+41
	jmp Lifexit14x1x2x3x4x5x7x8x9x10x11
Lelse14x1x2x3x4x5x7x8x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit14x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Loptcont14x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]
	leave
	ret
Lcont14x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont14x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 23*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 37*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 41*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 22*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 24*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 8
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame15x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers15x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers15x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args15x1x2
	mov r10, 0
Lcopy_new_var_params15x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params15x1x2
Ldummy_frame15x1x2:
Lno_more_args15x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode15x1x2 )
	jmp Lcont15x1x2
Lcode15x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame15x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers15x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers15x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args15x1x2x3x4
	mov r10, 0
Lcopy_new_var_params15x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params15x1x2x3x4
Ldummy_frame15x1x2x3x4:
Lno_more_args15x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode15x1x2x3x4 )
	jmp Lcont15x1x2x3x4
Lcode15x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame15x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers15x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers15x1x2x3x4x5x7x8x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args15x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params15x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params15x1x2x3x4x5x7x8x9
Ldummy_frame15x1x2x3x4x5x7x8x9:
Lno_more_args15x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Loptcode15x1x2x3x4x5x7x8x9 )
	jmp Loptcont15x1x2x3x4x5x7x8x9
Loptcode15x1x2x3x4x5x7x8x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist15x1x2x3x4x5x7x8x9
Lmakelist15x1x2x3x4x5x7x8x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist15x1x2x3x4x5x7x8x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist15x1x2x3x4x5x7x8x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end15x1x2x3x4x5x7x8x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat15x1x2x3x4x5x7x8x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat15x1x2x3x4x5x7x8x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end15x1x2x3x4x5x7x8x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse15x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+32
	jmp Lifexit15x1x2x3x4x5x7x8x9x10x11
Lelse15x1x2x3x4x5x7x8x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *6]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit15x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Loptcont15x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame15x1x2x3x4x5x7x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers15x1x2x3x4x5x7x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers15x1x2x3x4x5x7x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args15x1x2x3x4x5x7x9
	mov r10, 0
Lcopy_new_var_params15x1x2x3x4x5x7x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params15x1x2x3x4x5x7x9
Ldummy_frame15x1x2x3x4x5x7x9:
Lno_more_args15x1x2x3x4x5x7x9:
	MAKE_CLOSURE(rax, rbx, Loptcode15x1x2x3x4x5x7x9 )
	jmp Loptcont15x1x2x3x4x5x7x9
Loptcode15x1x2x3x4x5x7x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist15x1x2x3x4x5x7x9
Lmakelist15x1x2x3x4x5x7x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist15x1x2x3x4x5x7x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist15x1x2x3x4x5x7x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end15x1x2x3x4x5x7x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat15x1x2x3x4x5x7x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat15x1x2x3x4x5x7x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end15x1x2x3x4x5x7x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse15x1x2x3x4x5x7x9x10x11
;CONST
	mov rax, const_tbl+50
	jmp Lifexit15x1x2x3x4x5x7x9x10x11
Lelse15x1x2x3x4x5x7x9x10x11:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *5]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse15x1x2x3x4x5x7x9x10x11x14
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit15x1x2x3x4x5x7x9x10x11x14
Lelse15x1x2x3x4x5x7x9x10x11x14:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *6]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit15x1x2x3x4x5x7x9x10x11x14:
Lifexit15x1x2x3x4x5x7x9x10x11:
	leave
	ret
Loptcont15x1x2x3x4x5x7x9:
	leave
	ret
Lcont15x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont15x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 24*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 37*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 41*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 23*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 25*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 8
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame16x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers16x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers16x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args16x1x2
	mov r10, 0
Lcopy_new_var_params16x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params16x1x2
Ldummy_frame16x1x2:
Lno_more_args16x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode16x1x2 )
	jmp Lcont16x1x2
Lcode16x1x2:
	push rbp
	mov rbp , rsp
;LAMBDA_OPT
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame16x1x2x3
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers16x1x2x3:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers16x1x2x3
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args16x1x2x3
	mov r10, 0
Lcopy_new_var_params16x1x2x3:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params16x1x2x3
Ldummy_frame16x1x2x3:
Lno_more_args16x1x2x3:
	MAKE_CLOSURE(rax, rbx, Loptcode16x1x2x3 )
	jmp Loptcont16x1x2x3
Loptcode16x1x2x3:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist16x1x2x3
Lmakelist16x1x2x3:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist16x1x2x3
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist16x1x2x3:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end16x1x2x3
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat16x1x2x3:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat16x1x2x3
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end16x1x2x3:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse16x1x2x3x4x5
;CONST
	mov rax, const_tbl+50
	jmp Lifexit16x1x2x3x4x5
Lelse16x1x2x3x4x5:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *5]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse16x1x2x3x4x5x8
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit16x1x2x3x4x5x8
Lelse16x1x2x3x4x5x8:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *6]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *2]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit16x1x2x3x4x5x8:
Lifexit16x1x2x3x4x5:
	leave
	ret
Loptcont16x1x2x3:
	leave
	ret
Lcont16x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 25*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 5
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame17x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers17x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers17x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args17x1x2
	mov r10, 0
Lcopy_new_var_params17x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params17x1x2
Ldummy_frame17x1x2:
Lno_more_args17x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode17x1x2 )
	jmp Lcont17x1x2
Lcode17x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame17x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers17x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers17x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args17x1x2x3x4
	mov r10, 0
Lcopy_new_var_params17x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params17x1x2x3x4
Ldummy_frame17x1x2x3x4:
Lno_more_args17x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode17x1x2x3x4 )
	jmp Lcont17x1x2x3x4
Lcode17x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame17x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers17x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers17x1x2x3x4x5x7x8x9
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args17x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params17x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params17x1x2x3x4x5x7x8x9
Ldummy_frame17x1x2x3x4x5x7x8x9:
Lno_more_args17x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Lcode17x1x2x3x4x5x7x8x9 )
	jmp Lcont17x1x2x3x4x5x7x8x9
Lcode17x1x2x3x4x5x7x8x9:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse17x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+4
	jmp Lifexit17x1x2x3x4x5x7x8x9x10x11
Lelse17x1x2x3x4x5x7x8x9x10x11:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse17x1x2x3x4x5x7x8x9x10x11x14
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit17x1x2x3x4x5x7x8x9x10x11x14
Lelse17x1x2x3x4x5x7x8x9x10x11x14:
;CONST
	mov rax, const_tbl+2
Lifexit17x1x2x3x4x5x7x8x9x10x11x14:
Lifexit17x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Lcont17x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame17x1x2x3x4x5x7x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers17x1x2x3x4x5x7x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers17x1x2x3x4x5x7x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args17x1x2x3x4x5x7x9
	mov r10, 0
Lcopy_new_var_params17x1x2x3x4x5x7x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params17x1x2x3x4x5x7x9
Ldummy_frame17x1x2x3x4x5x7x9:
Lno_more_args17x1x2x3x4x5x7x9:
	MAKE_CLOSURE(rax, rbx, Loptcode17x1x2x3x4x5x7x9 )
	jmp Loptcont17x1x2x3x4x5x7x9
Loptcode17x1x2x3x4x5x7x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist17x1x2x3x4x5x7x9
Lmakelist17x1x2x3x4x5x7x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist17x1x2x3x4x5x7x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist17x1x2x3x4x5x7x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end17x1x2x3x4x5x7x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat17x1x2x3x4x5x7x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat17x1x2x3x4x5x7x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end17x1x2x3x4x5x7x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse17x1x2x3x4x5x7x9x10x11
;CONST
	mov rax, const_tbl+50
	jmp Lifexit17x1x2x3x4x5x7x9x10x11
Lelse17x1x2x3x4x5x7x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit17x1x2x3x4x5x7x9x10x11:
	leave
	ret
Loptcont17x1x2x3x4x5x7x9:
	leave
	ret
Lcont17x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont17x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 27*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 26*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 5
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame18x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers18x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers18x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args18x1x2
	mov r10, 0
Lcopy_new_var_params18x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params18x1x2
Ldummy_frame18x1x2:
Lno_more_args18x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode18x1x2 )
	jmp Lcont18x1x2
Lcode18x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame18x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers18x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers18x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args18x1x2x3x4
	mov r10, 0
Lcopy_new_var_params18x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params18x1x2x3x4
Ldummy_frame18x1x2x3x4:
Lno_more_args18x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode18x1x2x3x4 )
	jmp Lcont18x1x2x3x4
Lcode18x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame18x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers18x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers18x1x2x3x4x5x7x8x9
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args18x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params18x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params18x1x2x3x4x5x7x8x9
Ldummy_frame18x1x2x3x4x5x7x8x9:
Lno_more_args18x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Lcode18x1x2x3x4x5x7x8x9 )
	jmp Lcont18x1x2x3x4x5x7x8x9
Lcode18x1x2x3x4x5x7x8x9:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse18x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+4
	jmp Lifexit18x1x2x3x4x5x7x8x9x10x11
Lelse18x1x2x3x4x5x7x8x9x10x11:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse18x1x2x3x4x5x7x8x9x10x11x14
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit18x1x2x3x4x5x7x8x9x10x11x14
Lelse18x1x2x3x4x5x7x8x9x10x11x14:
;CONST
	mov rax, const_tbl+2
Lifexit18x1x2x3x4x5x7x8x9x10x11x14:
Lifexit18x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Lcont18x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame18x1x2x3x4x5x7x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers18x1x2x3x4x5x7x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers18x1x2x3x4x5x7x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args18x1x2x3x4x5x7x9
	mov r10, 0
Lcopy_new_var_params18x1x2x3x4x5x7x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params18x1x2x3x4x5x7x9
Ldummy_frame18x1x2x3x4x5x7x9:
Lno_more_args18x1x2x3x4x5x7x9:
	MAKE_CLOSURE(rax, rbx, Loptcode18x1x2x3x4x5x7x9 )
	jmp Loptcont18x1x2x3x4x5x7x9
Loptcode18x1x2x3x4x5x7x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist18x1x2x3x4x5x7x9
Lmakelist18x1x2x3x4x5x7x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist18x1x2x3x4x5x7x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist18x1x2x3x4x5x7x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end18x1x2x3x4x5x7x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat18x1x2x3x4x5x7x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat18x1x2x3x4x5x7x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end18x1x2x3x4x5x7x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse18x1x2x3x4x5x7x9x10x11
;CONST
	mov rax, const_tbl+50
	jmp Lifexit18x1x2x3x4x5x7x9x10x11
Lelse18x1x2x3x4x5x7x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit18x1x2x3x4x5x7x9x10x11:
	leave
	ret
Loptcont18x1x2x3x4x5x7x9:
	leave
	ret
Lcont18x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont18x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 26*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 38*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 26*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 4*WORD_SIZE]
	push rax
	push 7
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame19x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers19x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers19x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args19x1x2
	mov r10, 0
Lcopy_new_var_params19x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params19x1x2
Ldummy_frame19x1x2:
Lno_more_args19x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode19x1x2 )
	jmp Lcont19x1x2
Lcode19x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame19x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers19x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers19x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args19x1x2x3x4
	mov r10, 0
Lcopy_new_var_params19x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params19x1x2x3x4
Ldummy_frame19x1x2x3x4:
Lno_more_args19x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode19x1x2x3x4 )
	jmp Lcont19x1x2x3x4
Lcode19x1x2x3x4:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame19x1x2x3x4x5x7x8x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers19x1x2x3x4x5x7x8x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers19x1x2x3x4x5x7x8x9
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args19x1x2x3x4x5x7x8x9
	mov r10, 0
Lcopy_new_var_params19x1x2x3x4x5x7x8x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params19x1x2x3x4x5x7x8x9
Ldummy_frame19x1x2x3x4x5x7x8x9:
Lno_more_args19x1x2x3x4x5x7x8x9:
	MAKE_CLOSURE(rax, rbx, Lcode19x1x2x3x4x5x7x8x9 )
	jmp Lcont19x1x2x3x4x5x7x8x9
Lcode19x1x2x3x4x5x7x8x9:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse19x1x2x3x4x5x7x8x9x10x11
;CONST
	mov rax, const_tbl+4
	jmp Lifexit19x1x2x3x4x5x7x8x9x10x11
Lelse19x1x2x3x4x5x7x8x9x10x11:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;OR
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit19x1x2x3x4x5x7x8x9x10x11x14x15x15x16
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
Lorexit19x1x2x3x4x5x7x8x9x10x11x14x15x15x16:
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse19x1x2x3x4x5x7x8x9x10x11x14
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *5]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit19x1x2x3x4x5x7x8x9x10x11x14
Lelse19x1x2x3x4x5x7x8x9x10x11x14:
;CONST
	mov rax, const_tbl+2
Lifexit19x1x2x3x4x5x7x8x9x10x11x14:
Lifexit19x1x2x3x4x5x7x8x9x10x11:
	leave
	ret
Lcont19x1x2x3x4x5x7x8x9:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;LAMBDA_OPT
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame19x1x2x3x4x5x7x9
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers19x1x2x3x4x5x7x9:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers19x1x2x3x4x5x7x9
	mov r14, [rbp + 8 * 3]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args19x1x2x3x4x5x7x9
	mov r10, 0
Lcopy_new_var_params19x1x2x3x4x5x7x9:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params19x1x2x3x4x5x7x9
Ldummy_frame19x1x2x3x4x5x7x9:
Lno_more_args19x1x2x3x4x5x7x9:
	MAKE_CLOSURE(rax, rbx, Loptcode19x1x2x3x4x5x7x9 )
	jmp Loptcont19x1x2x3x4x5x7x9
Loptcode19x1x2x3x4x5x7x9:
	mov r8, qword [rsp+ 8 * 2]
	dec r8
	mov r9, qword 0
	mov rbx, r8
	mov r12, r8
	sub r12, r9
	mov rax, SOB_NIL_ADDRESS
	add rbx, 2
	cmp r12, 0
	jle Laftermakelist19x1x2x3x4x5x7x9
Lmakelist19x1x2x3x4x5x7x9:
	mov r13, qword [rsp+8*rbx]
	MAKE_PAIR(rdx, r13, rax)
	mov rax, rdx
	dec rbx
	dec r12
	cmp r12, 0
	jne Lmakelist19x1x2x3x4x5x7x9
	mov rbx, r9
	mov qword [rsp+8*(rbx+3)], rax
Laftermakelist19x1x2x3x4x5x7x9:
	mov r15, qword [rsp + 8*2]
	dec r15
	mov r12, r15
	mov r14, 1
	sub r12, r14
	cmp r12, 1
	jle Llambdaopt_end19x1x2x3x4x5x7x9
	mov r13, r14
	add r13, 2
	mov r9, 1
	add r9, 3
	add r15, 2
Llambdaopt_repeat19x1x2x3x4x5x7x9:
	mov r10, qword [rsp+8*r13]
	mov qword [rsp+8*r15], r10
	dec r13
	dec r15
	dec r9
	cmp r9, 0
	jne Llambdaopt_repeat19x1x2x3x4x5x7x9
	inc r15
	shl r15, 3
	add rsp, r15
	mov r14, qword 2
	mov [rsp + 8*2], r14
Llambdaopt_end19x1x2x3x4x5x7x9:
	nop
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse19x1x2x3x4x5x7x9x10x11
;CONST
	mov rax, const_tbl+50
	jmp Lifexit19x1x2x3x4x5x7x9x10x11
Lelse19x1x2x3x4x5x7x9x10x11:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *5]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit19x1x2x3x4x5x7x9x10x11:
	leave
	ret
Loptcont19x1x2x3x4x5x7x9:
	leave
	ret
Lcont19x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont19x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 45*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;DEF_VAR_FREE
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 24*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 19*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 29*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 28*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 21*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 6*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 7*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 5*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 3*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 1*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 2*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 14*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 15*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 11*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 10*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 38*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 27*WORD_SIZE]
	push rax
;VAR_FREE
	mov rax, qword [fvar_tbl + 26*WORD_SIZE]
	push rax
	push 19
;LAMBDA_SIMPLE
	MALLOC rax, 8
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 0
	cmp r8, qword 0
	je Ldummy_frame20x1x2
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 1
	jne Lcopy_pointers20x1x2
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2
	mov r10, 0
Lcopy_new_var_params20x1x2:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2
Ldummy_frame20x1x2:
Lno_more_args20x1x2:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2 )
	jmp Lcont20x1x2
Lcode20x1x2:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame20x1x2x3x4x4x5
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2x3x4x4x5:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers20x1x2x3x4x4x5
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2x3x4x4x5
	mov r10, 0
Lcopy_new_var_params20x1x2x3x4x4x5:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2x3x4x4x5
Ldummy_frame20x1x2x3x4x4x5:
Lno_more_args20x1x2x3x4x4x5:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2x3x4x4x5 )
	jmp Lcont20x1x2x3x4x4x5
Lcode20x1x2x3x4x4x5:
	push rbp
	mov rbp , rsp
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+23
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame20x1x2x3x4x4x5x6x7
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2x3x4x4x5x6x7:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers20x1x2x3x4x4x5x6x7
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2x3x4x4x5x6x7
	mov r10, 0
Lcopy_new_var_params20x1x2x3x4x4x5x6x7:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2x3x4x4x5x6x7
Ldummy_frame20x1x2x3x4x4x5x6x7:
Lno_more_args20x1x2x3x4x4x5x6x7:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2x3x4x4x5x6x7 )
	jmp Lcont20x1x2x3x4x4x5x6x7
Lcode20x1x2x3x4x4x5x6x7:
	push rbp
	mov rbp , rsp
;SEQ
;SET_VAR_PARAM
;BOX
	mov r12, [rbp + 8 * (4 + 0)]
	MALLOC rbx, 8
	mov qword [rbx], r12
	mov rax, rbx
	mov qword [rbp + 8 * (4 + 0)], rax
	mov rax, SOB_VOID_ADDRESS
;SEQ
;BOXSET
;LAMBDA_SIMPLE
	MALLOC rax, 32
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 3
	cmp r8, qword 0
	je Ldummy_frame20x1x2x3x4x4x5x6x7x8x10x11x12
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2x3x4x4x5x6x7x8x10x11x12:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 4
	jne Lcopy_pointers20x1x2x3x4x4x5x6x7x8x10x11x12
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2x3x4x4x5x6x7x8x10x11x12
	mov r10, 0
Lcopy_new_var_params20x1x2x3x4x4x5x6x7x8x10x11x12:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2x3x4x4x5x6x7x8x10x11x12
Ldummy_frame20x1x2x3x4x4x5x6x7x8x10x11x12:
Lno_more_args20x1x2x3x4x4x5x6x7x8x10x11x12:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2x3x4x4x5x6x7x8x10x11x12 )
	jmp Lcont20x1x2x3x4x4x5x6x7x8x10x11x12
Lcode20x1x2x3x4x4x5x6x7x8x10x11x12:
	push rbp
	mov rbp , rsp
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+32
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +3)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x4x5x6x7x8x10x11x12x13x14
;CONST
	mov rax, const_tbl+4
	jmp Lifexit20x1x2x3x4x4x5x6x7x8x10x11x12x13x14
Lelse20x1x2x3x4x4x5x6x7x8x10x11x12x13x14:
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +3)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 3
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +3)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 46*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x4x5x6x7x8x10x11x12x13x14x17
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +3)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *2]
	mov rax, qword [rax + 8 *17]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +2)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 5
;BOXGET
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 5
	CLOSURE_CODE rbx, rax
	jmp rbx
	jmp Lifexit20x1x2x3x4x4x5x6x7x8x10x11x12x13x14x17
Lelse20x1x2x3x4x4x5x6x7x8x10x11x12x13x14x17:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x4x5x6x7x8x10x11x12x13x14x17:
Lifexit20x1x2x3x4x4x5x6x7x8x10x11x12x13x14:
	leave
	ret
Lcont20x1x2x3x4x4x5x6x7x8x10x11x12:
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	pop qword [rax]
	mov rax, SOB_VOID_ADDRESS
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *2]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x4x5x6x7x8x10x12x13
;CONST
	mov rax, const_tbl+2
	jmp Lifexit20x1x2x3x4x4x5x6x7x8x10x12x13
Lelse20x1x2x3x4x4x5x6x7x8x10x12x13:
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *3]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *17]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *2]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *1]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]
	push rax
	push 5
;BOXGET
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	mov rax, qword [rax]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 5
	CLOSURE_CODE rbx, rax
	jmp rbx
Lifexit20x1x2x3x4x4x5x6x7x8x10x12x13:
	leave
	ret
Lcont20x1x2x3x4x4x5x6x7:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont20x1x2x3x4x4x5:
	push rax
	push 2
;LAMBDA_SIMPLE
	MALLOC rax, 16
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 1
	cmp r8, qword 0
	je Ldummy_frame20x1x2x3x4
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2x3x4:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 2
	jne Lcopy_pointers20x1x2x3x4
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2x3x4
	mov r10, 0
Lcopy_new_var_params20x1x2x3x4:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2x3x4
Ldummy_frame20x1x2x3x4:
Lno_more_args20x1x2x3x4:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2x3x4 )
	jmp Lcont20x1x2x3x4
Lcode20x1x2x3x4:
	push rbp
	mov rbp , rsp
;LAMBDA_SIMPLE
	MALLOC rax, 24
	mov rbx, rax
	mov qword [rbx], SOB_NIL_ADDRESS
	mov r8, 2
	cmp r8, qword 0
	je Ldummy_frame20x1x2x3x4x5
	mov rax, qword [rbp + 8 * 2]
	mov r10, 0
Lcopy_pointers20x1x2x3x4x5:
	mov r11, [rax + 8 * r10]
	inc r10
	mov qword [rbx + 8 * r10], r11
	cmp r10, 3
	jne Lcopy_pointers20x1x2x3x4x5
	mov r14, [rbp+ 24]
	shl r14, 3
	MALLOC rax, r14
	mov r11, rax
	mov [rbx], r11
	mov r8, qword [rbp + 3 * 8]
	cmp r8, 0
	je Lno_more_args20x1x2x3x4x5
	mov r10, 0
Lcopy_new_var_params20x1x2x3x4x5:
	mov r9, PVAR(r10)
	mov [rax + 8 * r10], qword r9
	inc r10
	cmp r10, qword r8
	jne Lcopy_new_var_params20x1x2x3x4x5
Ldummy_frame20x1x2x3x4x5:
Lno_more_args20x1x2x3x4x5:
	MAKE_CLOSURE(rax, rbx, Lcode20x1x2x3x4x5 )
	jmp Lcont20x1x2x3x4x5
Lcode20x1x2x3x4x5:
	push rbp
	mov rbp , rsp
;OR
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *7]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x7x8
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *7]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x7x8x10
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x7x8x10
Lelse20x1x2x3x4x5x6x7x8x10:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x7x8x10:
	jmp Lifexit20x1x2x3x4x5x6x7x8
Lelse20x1x2x3x4x5x6x7x8:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x7x8:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *8]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x8x9
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *8]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x8x9x11
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x8x9x11
Lelse20x1x2x3x4x5x6x8x9x11:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x8x9x11:
	jmp Lifexit20x1x2x3x4x5x6x8x9
Lelse20x1x2x3x4x5x6x8x9:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x8x9:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *9]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x9x10
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *9]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x9x10x12
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *14]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *14]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 46*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x9x10x12x14
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *15]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *15]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 46*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x9x10x12x14
Lelse20x1x2x3x4x5x6x9x10x12x14:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x9x10x12x14:
	jmp Lifexit20x1x2x3x4x5x6x9x10x12
Lelse20x1x2x3x4x5x6x9x10x12:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x9x10x12:
	jmp Lifexit20x1x2x3x4x5x6x9x10
Lelse20x1x2x3x4x5x6x9x10:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x9x10:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *10]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x10x11
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *10]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x10x11x13
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *16]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *16]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *1]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x10x11x13
Lelse20x1x2x3x4x5x6x10x11x13:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x10x11x13:
	jmp Lifexit20x1x2x3x4x5x6x10x11
Lelse20x1x2x3x4x5x6x10x11:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x10x11:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *11]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x11x12
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *11]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x11x12x14
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *3]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *4]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 5
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x11x12x14
Lelse20x1x2x3x4x5x6x11x12x14:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x11x12x14:
	jmp Lifexit20x1x2x3x4x5x6x11x12
Lelse20x1x2x3x4x5x6x11x12:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x11x12:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *12]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x12x13
;IF
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
	push 2
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *12]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	cmp rax, SOB_FALSE_ADDRESS
	je Lelse20x1x2x3x4x5x6x12x13x15
;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *6]
	push rax
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *5]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 5
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *0]
	mov rax, qword [rax + 8 *0]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	jmp Lifexit20x1x2x3x4x5x6x12x13x15
Lelse20x1x2x3x4x5x6x12x13x15:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x12x13x15:
	jmp Lifexit20x1x2x3x4x5x6x12x13
Lelse20x1x2x3x4x5x6x12x13:
;CONST
	mov rax, const_tbl+2
Lifexit20x1x2x3x4x5x6x12x13:
	cmp rax, SOB_FALSE_ADDRESS
	jne Lorexit20x1x2x3x4x5x6
;APPLIC_TP
;CONST
	mov rax, const_tbl+1
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +1)]
	push rax
;VAR_PARAM
	mov rax, qword [rbp + 8 * (4 +0)]
	push rax
	push 3
;VAR_BOUND
	mov rax, qword [rbp + 8 * 2]
	mov rax, qword [rax + 8 *1]
	mov rax, qword [rax + 8 *13]

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 3
	CLOSURE_CODE rbx, rax
	jmp rbx
Lorexit20x1x2x3x4x5x6:
	leave
	ret
Lcont20x1x2x3x4x5:
	leave
	ret
Lcont20x1x2x3x4:

	CLOSURE_ENV rbx, rax
	mov r10, rbx
	push qword r10
	mov r9, qword [rbp+ 8*1]
	push qword r9
	mov r8, qword [rbp]
	push qword r8
	SHIFT_FRAME 2
	CLOSURE_CODE rbx, rax
	jmp rbx
	leave
	ret
Lcont20x1x2:

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx
	mov qword [fvar_tbl + 46*WORD_SIZE], rax
	mov rax, SOB_VOID_ADDRESS

    call write_sob_if_not_void


;APPLIC
;CONST
	mov rax, const_tbl+1
	push rax
;CONST
	mov rax, const_tbl+118
	push rax
;CONST
	mov rax, const_tbl+41
	push rax
	push 3
;VAR_FREE
	mov rax, qword [fvar_tbl + 22*WORD_SIZE]

	CLOSURE_ENV rbx, rax
	push rbx
	CLOSURE_CODE rbx, rax
	call rbx

	add rsp, 8*1
	pop rbx
	shl rbx, 3
	add rsp, rbx

    call write_sob_if_not_void
	jmp end_last_frame
my_car:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    CAR rax, rsi

    leave
    ret

my_cdr:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    CDR rax, rsi

    leave
    ret

car_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov rdx, PVAR(1)
    mov qword [rsi+TYPE_SIZE], rdx
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

cdr_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov rdx, PVAR(1)
    mov qword [rsi+TYPE_SIZE+WORD_SIZE], rdx
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

my_cons:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov rdx, PVAR(1)
    MAKE_PAIR(rax, rsi, rdx)
    ; mov rax, SOB_VOID_ADDRESS

    leave
    ret


is_boolean:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_BOOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_float:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_FLOAT
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_integer:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_INTEGER
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_pair:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_PAIR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_null:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_NIL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_char:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CHAR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_vector:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_VECTOR
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_string:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_STRING
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_procedure:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_CLOSURE
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

is_symbol:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    mov sil, byte [rsi]

    cmp sil, T_SYMBOL
    jne .wrong_type
    mov rax, SOB_TRUE_ADDRESS
    jmp .return

.wrong_type:
    mov rax, SOB_FALSE_ADDRESS
.return:
    leave
    ret

string_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    STRING_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

string_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov sil, byte [rsi]
    MAKE_CHAR(rax, sil)

    leave
    ret

string_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    STRING_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 0
    add rsi, rdi

    mov rax, PVAR(2)
    CHAR_VAL rax, rax
    mov byte [rsi], al
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    CHAR_VAL rdi, rdi
    and rdi, 255

    MAKE_STRING rax, rsi, dil

    leave
    ret

vector_length:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0)
    VECTOR_LENGTH rsi, rsi
    MAKE_INT(rax, rsi)

    leave
    ret

vector_ref:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rax, [rsi]

    leave
    ret

vector_set:
    push rbp
    mov rbp, rsp

    mov rsi, PVAR(0) 
    VECTOR_ELEMENTS rsi, rsi
    mov rdi, PVAR(1)
    INT_VAL rdi, rdi
    shl rdi, 3
    add rsi, rdi

    mov rdi, PVAR(2)
    mov [rsi], rdi
    mov rax, SOB_VOID_ADDRESS

    leave
    ret

make_vector:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    mov rdi, PVAR(1)
    

    MAKE_VECTOR rax, rsi, rdi

    leave
    ret

symbol_to_string:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    SYMBOL_VAL rsi, rsi
    
    STRING_LENGTH rcx, rsi
    STRING_ELEMENTS rdi, rsi

    push rcx
    push rdi

    mov dil, byte [rdi]
    MAKE_CHAR(rax, dil)
    push rax
    MAKE_INT(rax, rcx)
    push rax
    push 2
    push SOB_NIL_ADDRESS
    call make_string
    add rsp, 4*8

    STRING_ELEMENTS rsi, rax

    pop rdi
    pop rcx

.loop:
    cmp rcx, 0
    je .end
    lea r8, [rdi+rcx]
    lea r9, [rsi+rcx]

    mov bl, byte [r8]
    mov byte [r9], bl
    
    dec rcx
    jmp .loop
.end:

    leave
    ret

char_to_integer:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    CHAR_VAL rsi, rsi
    and rsi, 255
    MAKE_INT(rax, rsi)

    leave
    ret

integer_to_char:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    and rsi, 255
    MAKE_CHAR(rax, sil)

    leave
    ret

is_eq:
    push rbp
    mov rbp, rsp

    
    mov rsi, PVAR(0)
    mov rdi, PVAR(1)
    cmp rsi, rdi
    je .true
    mov rax, SOB_FALSE_ADDRESS
    jmp .return

.true:
    mov rax, SOB_TRUE_ADDRESS

.return:
    leave
    ret

bin_add:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    addsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_mul:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    mulsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_sub:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    subsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_div:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    divsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    leave
    ret

bin_lt:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpltsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret

bin_equ:
    push rbp
    mov rbp, rsp

    mov r8, 0

    mov rsi, PVAR(0)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .test_next
    or r8, 1

.test_next:

    mov rsi, PVAR(1)
    push rsi
    push 1
    push SOB_NIL_ADDRESS
    call is_float
    add rsp, 3*WORD_SIZE 


    cmp rax, SOB_TRUE_ADDRESS
    je .load_numbers
    or r8, 2

.load_numbers:
    push r8

    shr r8, 1
    jc .first_arg_int
    mov rsi, PVAR(0)
    FLOAT_VAL rsi, rsi 
    movq xmm0, rsi
    jmp .load_next_float

.first_arg_int:
    mov rsi, PVAR(0)
    INT_VAL rsi, rsi
    cvtsi2sd xmm0, rsi

.load_next_float:
    shr r8, 1
    jc .second_arg_int
    mov rsi, PVAR(1)
    FLOAT_VAL rsi, rsi
    movq xmm1, rsi
    jmp .perform_float_op

.second_arg_int:
    mov rsi, PVAR(1)
    INT_VAL rsi, rsi
    cvtsi2sd xmm1, rsi

.perform_float_op:
    cmpeqsd xmm0, xmm1

    pop r8
    cmp r8, 3
    jne .return_float

    cvttsd2si rsi, xmm0
    MAKE_INT(rax, rsi)
    jmp .return

.return_float:
    movq rsi, xmm0
    MAKE_FLOAT(rax, rsi)

.return:

    INT_VAL rsi, rax
    cmp rsi, 0
    je .return_false
    mov rax, SOB_TRUE_ADDRESS
    jmp .final_return

.return_false:
    mov rax, SOB_FALSE_ADDRESS

.final_return:


    leave
    ret


Lend:
ret